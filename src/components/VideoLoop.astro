---
const {src, class:classNames, max, style={}} = Astro.props
if (max) style.maxWidth = max
---
<video class:list={["video-loop", classNames]} style={style} loop playsinline muted data-video-source={src} />

<style is:global>
    .video-loop{
        opacity:0;

        &:not(.sized){
            /* escape hatch for the tailwind-sized pages */
            width:100%;
        }

        transition: opacity 1s;
        &.initialized{
            opacity:1;
        }
    }
</style>

<script>
    let videoLoops = document.querySelectorAll(".video-loop")

    const loader = new IntersectionObserver((entries, observer) => {
        for (const entry of entries){
            let elt = entry.target as HTMLVideoElement,
                active = elt.classList.contains("initialized")
            if (entry.isIntersecting && !active){
                let src = elt.dataset.videoSource,
                    source = document.createElement("source")
                source.src = src
                elt.append(source)
                elt.classList.add("initialized")
                elt.play()
            }
        }
    }, {root: null, rootMargin: '10% 0%', threshold: 0.0})

    const unloader = new IntersectionObserver((entries, observer) => {
        for (const entry of entries){
            let elt = entry.target as HTMLVideoElement,
                active = elt.classList.contains("initialized")
            if (!entry.isIntersecting && active){
                elt.pause()
                elt.innerHTML = ""
                elt.classList.remove("initialized")
            }
        }
    }, {root: null, rootMargin: '66% 0%', threshold: 0.0})

    videoLoops.forEach(elt => {
        loader.observe(elt)
        unloader.observe(elt)
    })
</script>