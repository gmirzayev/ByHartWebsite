---
import SoundIcon from "@assets/VimeoPlayer/sound-on-off.svg?raw"
import RewindIcon from "@assets/VimeoPlayer/rewind.svg?raw"

let {video, id, class:classNames, height, action=undefined,
    autoplay="1", loop="1", muted="1", badge="1", // default to enabled
    title="0", byline="0", controls="0", portrait="0", autopause="0" // default to disabled
} = Astro.props

if (action=="unpause"){
    autoplay="0"
    loop="0"
}

let params = new URLSearchParams({
    autoplay, loop, muted, title, byline, controls, portrait, autopause
}).toString()

const ALLOW = "autoplay; fullscreen; picture-in-picture; clipboard-write; encrypted-media"
const URL = `https://player.vimeo.com/video/${video}?${params}`
const STYLE = {paddingTop:height}
---

<div id={id} class:list={["vimeo-player", classNames]}>
    <div class="frame">
        <div class="embed" style={STYLE} data-vimeo-src={URL} data-vimeo-allow={ALLOW} />
        {action && <div class:list={["buttons", action]} >
            <button class:list={["action", action]} >
                <Fragment set:html={SoundIcon} />
            </button>
            <button class="rewind">
                <Fragment set:html={RewindIcon} />
            </button>
        </div>}
    </div>
</div>

<style is:global>
    .vimeo-player{
        display:flex;
        justify-content: space-around;

        &.rc iframe, &.rc .frame{
            border-radius: 3px;

            @media (min-width: 768px) {
                border-radius: 5px;
            }
        }

        &.rc-big iframe, &.rc-big .frame{
            border-radius: 3px;

            @media (min-width: 768px) {
                border-radius: 25px;
            }
        }

        &.rc-md-only iframe, &.rc-md-only .frame{
            border-radius: 0;
            @media (min-width: 768px) {
                border-radius: 5px;
            }
        }




        .frame{
            position:relative;
            width:100%;
            transition:background-color 1s;

            background:transparent;
            .initialized &{
                background:rgba(53,49,49,20%);
            }
        }


        .frame .buttons{
            position: absolute;
            top:0;
            left:0;
            right:0;
            bottom:0;

            display:flex;
            flex-direction: row-reverse;
            gap:10px;
            transition:opacity 1s;
            opacity:0;

            .initialized &{
                opacity:1;
            }

            &.unmute{
                padding:20px;
                align-items:end;
                justify-content: end;

            }
            &.unpause{
                align-items:center;
                justify-content: center;
            }
        }


        .frame button{
            position:relative;
            color: var(--charcoal);
            padding:12px;

            font: 500 21px Karla, sans-serif;
            letter-spacing: 4.2px;
            text-transform: uppercase;
            z-index:2;

            transition: opacity 500ms;

            &::after{
                position:absolute;
                content: " ";
                background: #FF97FD;
                border:1px solid var(--charcoal);
                width:100%;
                height:100%;
                top:0;
                left:0;
                z-index:-1;
                transform: rotate(-1.25deg);
                transition: transform .25s;
            }

            &:hover::after{
                transform: rotate(0);
            }
        }

        .frame button.action.unmute{
            .sound-on{ display:none; }

            &.fired{
                opacity:0;
                .sound-on{ display:inline; }
                .sound-off{ display:none; }
            }

            @media (min-width: 768px) {
                padding-top:10px;
                padding-bottom:10px;

                svg{ display:none; }

                &::before{
                    content:"Sound On";
                }
                &.fired::before{
                    content:"Sound Off"
                }
            }

        }

        .frame:hover button.action.unmute.fired,
        .frame:hover button.action.unpause.fired,
        .frame:hover button.action.unmute.fired + button.rewind{
            opacity: 1;
            pointer-events:auto;
        }


        button.rewind{
            opacity:0;
            display:none;
            min-width:50px;
            svg{
                margin:0 auto;
            }
        }

        .rewindable .frame button.rewind,
        .frame button.action.unmute.fired + button.rewind{
            display:inline;
            pointer-events:none;
        }

        button.action.unpause:not(.fired) + button.rewind{
            opacity:1;
            pointer-events:auto;
        }


        .frame button.action.unpause{
            padding-top:10px;
            padding-bottom:10px;

            svg{ display:none; }

            &::before{ content:"Play"; }

            &.fired{
                top:0;
                left:0;
                right:0;
                bottom:0;
                transform:none;
                &::before{ content:" " }
                &::after{opacity:0;}
            }
        }


        .embed{
            position:relative;

            iframe {
                position:absolute;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
            }

        }

    }

</style>

<script>
    import Player from '@vimeo/player';

    class Vimeo{
        static videos = []
        elt
        button
        rewind
        pause
        player
        action

        constructor(elt){
            this.elt = elt
            this.button = elt.querySelector(":scope button.action")
            this.rewind = elt.querySelector(":scope button.rewind")
            this.pause = elt.querySelector(":scope .buttons")
            this.action = this.button?.classList.contains("unmute") ? "unmute" :
                          this.button?.classList.contains("unpause") ? "unpause" :
                          null

            Vimeo.videos.push(this)
        }

        static videoForElement(elt){
            for (const video of Vimeo.videos){
                if (video.elt === elt) return video
            }
        }

        initialize(){
            if (!!this.player) return

            let embed = this.elt.querySelector(":scope .embed")
            if (embed instanceof HTMLElement){
                let iframe = document.createElement("iframe")
                iframe.allow = embed.dataset.vimeoAllow
                iframe.src = embed.dataset.vimeoSrc
                embed.append(iframe)

                this.player = new Player(iframe)
                this.player.on("ended", () => this.requeue())
                this.elt.classList.add("initialized")

                this.button?.addEventListener("click", e => this.handleAction(e))
                this.rewind?.addEventListener("click", e => this.handleRewind(e))
                this.pause?.addEventListener("click", e => this.handlePause(e))
            }

        }

        get loaded(){
            return !!this.player
        }

        get active(){
            return this.button?.classList.contains("fired")
        }

        handleRewind(e){
            this.player.setCurrentTime(0)
            if (this.action=="unpause"){
                this.elt.classList.remove("rewindable")
            }

            e.preventDefault()
            e.stopPropagation()
        }

        handlePause(e){
            if (this.active){
                if (this.action=="unpause") this.togglePlayback()
                else if (this.action=="unmute") this.toggleAudio()
            }

            e.preventDefault()
            e.stopPropagation()
        }

        handleAction(e){
            if (this.action=="unmute") this.toggleAudio()
            else if (this.action=="unpause") this.togglePlayback()

            e.preventDefault()
            e.stopPropagation()
        }

        requeue(){
            this.player.setCurrentTime(0)
            this.button.classList.remove("fired")
            this.elt.classList.remove("rewindable")
        }

        deactivateOthers(){
            // mute/pause any other active videos
            for (const vid of Vimeo.videos){
                if (vid.active && vid!==this){
                    if (vid.action=="unpause"){
                        vid.togglePlayback()
                    }else if (vid.action=="unmute"){
                        vid.toggleAudio()
                    }
                }
            }
        }

        toggleAudio(){
            const {button, player, active} = this

            if (active){
                // re-mute
                player.setMuted(true)
            }else{
                // un-mute
                this.deactivateOthers()
                player.setMuted(false)
            }

            button.classList.toggle("fired")
        }

        togglePlayback(){
            const {elt, button, player, active} = this

            if (active){
                // pause
                player.pause()
            }else{
                // play
                this.deactivateOthers()
                player.setMuted(false)
                player.play()
            }

            elt.classList.add("rewindable")
            button.classList.toggle("fired")
        }
    }


    document.addEventListener("DOMContentLoaded", () => {

        const vimeoPlayers = document.querySelectorAll('.vimeo-player')
        const lazyLoader = new IntersectionObserver((entries, observer) => {
            for (const entry of entries){
                let video = Vimeo.videoForElement(entry.target)
                if (entry.isIntersecting){
                    video.initialize()
                    observer.unobserve(entry.target)
                }
            }
        }, {root: null, rootMargin: '0px', threshold: 0.0})

        vimeoPlayers.forEach(elt => {
            lazyLoader.observe(elt)
            new Vimeo(elt)
        })
    })
</script>