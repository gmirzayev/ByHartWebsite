---
import { getImage } from "astro:assets";
import Navigation from "./Navigation.astro";

const { brand, tagline, hero, mobile, theme } = Astro.props;
const type = !!hero.format ? 'image' : 'video' // imported images get unpacked into ImageMetadata objects with `format` attrs, videos are just a path string
const small = type=='image' && await getImage({src:mobile ?? hero, width:1000})
const large = type=='image' && await getImage({src:hero, width:2800})
---

<style is:global>
  .scroll-container {
    position: relative;
    height: 120svh;

    &.dark{
      color:var(--cream);
      background:var(--charcoal);
    }

    .sticky-container {
      position: sticky;
      top: 0;
      z-index: 2;
    }
    .image-container {
      margin-top:200px;
      text-align: center;
      position: relative;
      z-index: 8;
    }

    #main-header {
      display: block;
      margin-left: auto;
      margin-right: auto;
      height: auto;
    }

    #project-title{
      position:absolute;
      bottom:35svh;
      width: 100%;
      text-align: center;
      overflow: hidden;
    }

    #project-title h1 {
      font: 122px/1.0 "Karla", sans-serif;
    }

    #project-title h2{
      font: 700 18px/1.2 "Karla", sans-serif;
      text-transform: uppercase;
      letter-spacing: 0.18em;
      margin-top:2em;
    }

    #main-header{
      /* initialize to default `updateImage` values */
      width: 20vw;
      margin-top: 0px;
      transform: rotate(-3deg);
      box-shadow: rgba(30, 30, 30, 0.5) -5px 5px 5px;
    }

    @media (max-width: 768px) {
      height: 100svh;
      #project-title{ bottom: 18svh; }
      #project-title h1 { font-size:72px; }
      #project-title h2 { font-size: 14px; }
    }

    @media (max-width: 500px) {
      #project-title h1 { font-size:58px; }
      #project-title h2 { font-size: 14px; }
    }
  }

</style>

<div class:list={["scroll-container", theme]}>
  <div class="sticky-container">
    <Navigation theme={theme} />
    <div class="image-container">
    {
      type == "image" ? (
        <picture>
          <source media="(max-width: 767px)" width={small.options.width} height={small.options.height} srcset={small.src} />
          <source media="(min-width: 768px)" width={large.options.width} height={large.options.height} srcset={large.src} />
          <img id="main-header" src={large.src} width={large.options.width} height={large.options.height} alt=" " />
        </picture>
      ) : (
        <video id="main-header" autoplay playsinline loop muted>
          {mobile && <source src={mobile} type="video/mp4" media="(max-width: 767px)" /> }
          <source src={hero} type="video/mp4" />
        </video>
      )
    }
    </div>
  </div>
  <div id="project-title">
    <h1>{brand}</h1>
    <h2>{tagline ?? "By Hart"}</h2>
  </div>
</div>

<script>
  import {scaleLinear} from "d3-scale";

  const image = document.getElementById("main-header");

  let sizeScale = scaleLinear().range([20, 100]).clamp(true),
      offsetScale = scaleLinear().range([0, -310]).clamp(true),
      turnScale = scaleLinear().range([-3, 0]).clamp(true),
      shadowScale = scaleLinear().rangeRound([5, 0]).clamp(true),
      scrollTimer = null;

  function updateScales(){
    const h = window.innerHeight / 2
    sizeScale = sizeScale.domain([0, .9*h])
    offsetScale = offsetScale.domain([0, .9*h])
    turnScale = turnScale.domain([0, .5*h])
    shadowScale = shadowScale.domain([0, .5*h])
    scheduleRender()
  }

  function scheduleRender(){
    cancelAnimationFrame(scrollTimer)
    scrollTimer = requestAnimationFrame(updateImage)
  }

  function updateImage(){
    const y = window.scrollY,
          angle = turnScale(y),
          shadow = shadowScale(y),
          size = sizeScale(y),
          offset = offsetScale(y)

    image.style.width = `${size}vw`;
    image.style.marginTop = `${offset}px`;
    image.style.transform = `rotate(${angle}deg)`
    image.style.boxShadow = `${-shadow}px ${shadow}px ${2*shadow}px rgba(30,30,30, 0.5)`
  }

  window.addEventListener("resize", updateScales)
  document.addEventListener("scroll", scheduleRender);
  document.addEventListener("DOMContentLoaded", updateScales)

</script>
